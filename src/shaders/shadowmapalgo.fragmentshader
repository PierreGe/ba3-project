#version 130

uniform vec3 u_light_intensity;
uniform sampler2D u_shadow_map;

varying vec4 v_color;
varying vec4 v_shadow_coord;
varying vec3 v_position_worldspace;
varying vec3 v_eyedirection_cameraspace;
varying vec3 v_lightdirection_cameraspace;
varying vec3 v_normal_cameraspace;

vec2 poissonDisk[16] = vec2[]( 
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760 ), 
   vec2( -0.91588581, 0.45771432 ), 
   vec2( -0.81544232, -0.87912464 ), 
   vec2( -0.38277543, 0.27676845 ), 
   vec2( 0.97484398, 0.75648379 ), 
   vec2( 0.44323325, -0.97511554 ), 
   vec2( 0.53742981, -0.47373420 ), 
   vec2( -0.26496911, -0.41893023 ), 
   vec2( 0.79197514, 0.19090188 ), 
   vec2( -0.24188840, 0.99706507 ), 
   vec2( -0.81409955, 0.91437590 ), 
   vec2( 0.19984126, 0.78641367 ), 
   vec2( 0.14383161, -0.14100790 ) 
);

void main()
{
	// Normal of the computed fragment, in camera space
	vec3 n = normalize( v_normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( v_lightdirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendiular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	float bias = 0.005*tan(acos(cosTheta));
	// bias = clamp(bias, 0,0.01);
    float visibility = 1.0;
    float antialiasing_level = 4.0;
    float shadow_precision = 1.0/(antialiasing_level+1.0);
    float spreading = 700.0;

    for (int i = 0; i < antialiasing_level; ++i)
    {
	    if ( texture2D( u_shadow_map, v_shadow_coord.xy + poissonDisk[i]/spreading).z  <=  (v_shadow_coord.z-bias)){
	        visibility -= shadow_precision;
	    }
    }
	
	// Eye vector (towards the camera)
	vec3 E = normalize(v_normal_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );

    gl_FragColor = v_color * visibility * cosTheta * vec4(u_light_intensity, 1) + 
    v_color * visibility * pow(cosAlpha, 5) * vec4(u_light_intensity, 1);
}