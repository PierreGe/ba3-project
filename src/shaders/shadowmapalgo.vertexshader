uniform mat4 u_model;
uniform mat4 u_view;
uniform mat4 u_projection;
uniform mat4 u_depth_model_1;
uniform mat4 u_depth_view_1;
uniform mat4 u_depth_projection_1;
uniform mat4 u_depth_model_2;
uniform mat4 u_depth_view_2;
uniform mat4 u_depth_projection_2;
uniform mat4 u_bias_matrix;
uniform vec4 u_color;
uniform vec3 u_light_position_1;
uniform vec3 u_light_position_2;
uniform float u_light_number;

attribute vec3 position;
attribute vec3 normal;

varying vec4 v_color;
varying vec4 v_shadow_coord_1;
varying vec4 v_shadow_coord_2;
varying vec3 v_position_worldspace;
varying vec3 v_eyedirection_cameraspace;
varying vec3 v_lightdirection_cameraspace_1;
varying vec3 v_lightdirection_cameraspace_2;
varying vec3 v_normal_cameraspace;

void main()
{
    gl_Position = u_projection * u_view * u_model * vec4(position, 1.0);
    v_color = u_color;

	// Position of the vertex, in worldspace : M * position
	v_position_worldspace = (u_model * vec4(position,1)).xyz;
	
	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	v_eyedirection_cameraspace = vec3(0,0,0) - ( u_view * u_model * vec4(position,1)).xyz;

	// Vector that goes from the vertex to the light, in camera space
	v_lightdirection_cameraspace_1 = (u_view*u_model*vec4(u_light_position_1,1)).xyz - (u_view * u_model * vec4(position,1)).xyz;
	v_shadow_coord_1 = u_bias_matrix * u_depth_projection_1 * u_depth_view_1 * u_depth_model_1 * vec4(position, 1.0);
    
	if (u_light_number >= 2.0) {
		// Vector that goes from the vertex to the light, in camera space
		v_lightdirection_cameraspace_2 = (u_view*u_model*vec4(u_light_position_2,1)).xyz - (u_view * u_model * vec4(position,1)).xyz;
		v_shadow_coord_2 = u_bias_matrix * u_depth_projection_2 * u_depth_view_2 * u_depth_model_2 * vec4(position, 1.0);
	}
	
	// Normal of the the vertex, in camera space
	v_normal_cameraspace = ( u_view * u_model * vec4(normal,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
	
}